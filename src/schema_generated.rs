// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum WeaponOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Weapon<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Weapon<'a> {
  type Inner = Weapon<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Weapon<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_DAMAGE: flatbuffers::VOffsetT = 6;
  pub const VT_TWO_HANDED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Weapon { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args WeaponArgs<'args>
  ) -> flatbuffers::WIPOffset<Weapon<'bldr>> {
    let mut builder = WeaponBuilder::new(_fbb);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_damage(args.damage);
    builder.add_two_handed(args.two_handed);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Weapon::VT_NAME, None)}
  }
  #[inline]
  pub fn damage(&self) -> i16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i16>(Weapon::VT_DAMAGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn two_handed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Weapon::VT_TWO_HANDED, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Weapon<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<i16>("damage", Self::VT_DAMAGE, false)?
     .visit_field::<bool>("two_handed", Self::VT_TWO_HANDED, false)?
     .finish();
    Ok(())
  }
}
pub struct WeaponArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub damage: i16,
    pub two_handed: bool,
}
impl<'a> Default for WeaponArgs<'a> {
  #[inline]
  fn default() -> Self {
    WeaponArgs {
      name: None,
      damage: 0,
      two_handed: false,
    }
  }
}

pub struct WeaponBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> WeaponBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Weapon::VT_NAME, name);
  }
  #[inline]
  pub fn add_damage(&mut self, damage: i16) {
    self.fbb_.push_slot::<i16>(Weapon::VT_DAMAGE, damage, 0);
  }
  #[inline]
  pub fn add_two_handed(&mut self, two_handed: bool) {
    self.fbb_.push_slot::<bool>(Weapon::VT_TWO_HANDED, two_handed, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> WeaponBuilder<'a, 'b> {
    let start = _fbb.start_table();
    WeaponBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Weapon<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Weapon<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Weapon");
      ds.field("name", &self.name());
      ds.field("damage", &self.damage());
      ds.field("two_handed", &self.two_handed());
      ds.finish()
  }
}
pub enum ShieldOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Shield<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Shield<'a> {
  type Inner = Shield<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Shield<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_DAMAGE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Shield { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ShieldArgs<'args>
  ) -> flatbuffers::WIPOffset<Shield<'bldr>> {
    let mut builder = ShieldBuilder::new(_fbb);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_damage(args.damage);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Shield::VT_NAME, None)}
  }
  #[inline]
  pub fn damage(&self) -> i16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i16>(Shield::VT_DAMAGE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Shield<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<i16>("damage", Self::VT_DAMAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct ShieldArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub damage: i16,
}
impl<'a> Default for ShieldArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShieldArgs {
      name: None,
      damage: 0,
    }
  }
}

pub struct ShieldBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ShieldBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Shield::VT_NAME, name);
  }
  #[inline]
  pub fn add_damage(&mut self, damage: i16) {
    self.fbb_.push_slot::<i16>(Shield::VT_DAMAGE, damage, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ShieldBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ShieldBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Shield<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Shield<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Shield");
      ds.field("name", &self.name());
      ds.field("damage", &self.damage());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Shield`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_shield_unchecked`.
pub fn root_as_shield(buf: &[u8]) -> Result<Shield, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Shield>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Shield` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_shield_unchecked`.
pub fn size_prefixed_root_as_shield(buf: &[u8]) -> Result<Shield, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Shield>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Shield` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_shield_unchecked`.
pub fn root_as_shield_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Shield<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Shield<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Shield` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_shield_unchecked`.
pub fn size_prefixed_root_as_shield_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Shield<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Shield<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Shield and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Shield`.
pub unsafe fn root_as_shield_unchecked(buf: &[u8]) -> Shield {
  flatbuffers::root_unchecked::<Shield>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Shield and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Shield`.
pub unsafe fn size_prefixed_root_as_shield_unchecked(buf: &[u8]) -> Shield {
  flatbuffers::size_prefixed_root_unchecked::<Shield>(buf)
}
#[inline]
pub fn finish_shield_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Shield<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_shield_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Shield<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
